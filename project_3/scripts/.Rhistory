tab_model(model.backward, file="output.html")
tab_model(model.backward, file="output.html")
# Get AUC
library(pROC)
# Get AUC
library(pROC)
predpr = predict(model.backward,type=c("response"))
roccurve <- roc(mydata$GotDisability ~ predpr)
exp(model.backward$coefficients)
mydata = read_csv("logistic_data.csv") %>%
select("GotDisability","Gender", "Age_Cat", "Client Ethnicity") %>%
subset("Gender" != 'Trans Female') %>%
na.omit()
summary(as.factor(mydata$Gender))
mydata = read_csv("logistic_data.csv") %>%
select("GotDisability","Gender", "Age_Cat", "Client Ethnicity") %>%
subset("Gender" == 'Trans Female') %>%
na.omit()
summary(as.factor(mydata$Gender))
mydata = read_csv("logistic_data.csv") %>%
select("GotDisability","Gender", "Age_Cat", "Client Ethnicity") %>%
subset("Gender" != 'Trans Female') %>%
na.omit()
summary(as.factor(mydata$Gender))
mydata = read_csv("logistic_data.csv") %>%
select("GotDisability","Gender", "Age_Cat", "Client Ethnicity") %>%
subset("Gender" != 'Female') %>%
na.omit()
summary(as.factor(mydata$Gender))
mydata = read_csv("logistic_data.csv") %>%
subset("Gender" != 'Female') %>%
select("GotDisability","Gender", "Age_Cat", "Client Ethnicity") %>%
na.omit()
summary(as.factor(mydata$Gender))
View(mydata)
mydata = read_csv("logistic_data.csv") %>%
select("GotDisability","Gender", "Age_Cat", "Client Ethnicity") %>%
na.omit()
knitr::opts_chunk$set(echo = TRUE)
# Chi-Square Test
library(tidyverse)
fraud_data = read_csv('fraud_chisq.csv') %>%
select(-c("X1"))
mychisq = chisq.test(fraud_data$Counts, fraud_data$ExpectedCounts)
mychisq
#Wilcoxon-Rank Sum Test
mywilcox = wilcox.test(fraud_data$Counts, fraud_data$ExpectedCounts)
mywilcox
library(ggplot2)
my_tax_data = read_csv("tax_data_graph.csv")
tax_plot = ggplot(data=my_tax_data, aes(x=Number, y=value, fill=variable)) +
geom_bar(stat="identity", color="black", position=position_dodge()) + theme_minimal() +
labs(title = "Urban Ministries of Durham - 2006-2018 Tax Fraud Analysis", subtitle = 'Net-Income', y = 'Percentage (%)', fill = "Group") +
scale_x_continuous("Digit", labels = as.character(my_tax_data$Number), breaks = my_tax_data$Number)
print(tax_plot)
# This code creates the distributions age per disability attainted while at UMD
my_patient_data = read_csv("patients_data_graph.csv")
patient_plot = ggplot(my_patient_data, aes(x=Gender, y = my_patient_data$`Client Age at Entry`)) +
geom_boxplot(fill='#00BFC4') +
theme_minimal() +
labs(title = "Distributions of Age of Patients who Gained Disability", subtitle = 'Stratified by Gender', y = 'Age', x = 'Gender') +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
print(patient_plot)
# -------------- #
# Importing data
# -------------- #
mydata = read_csv("logistic_data.csv") %>%
select("GotDisability","Gender", "Age_Cat", "Client Ethnicity") %>%
na.omit()
# ------------------------------------------------------------------- #
# No Case Control
# ------------------------------------------------------------------- #
model = glm(data = mydata, GotDisability ~ Gender*Age_Cat*`Client Ethnicity`, family = binomial(link="logit"))
model.backward = step(model, direction = 'backward', trace = 0)
library(sjPlot)
tab_model(model.backward, file="output.html")
exp(model.backward$coefficients)
# Get AUC
library(pROC)
predpr = predict(model.backward,type=c("response"))
roccurve <- roc(mydata$GotDisability ~ predpr)
# ------------------------------------------------------------------- #
# Case Control - using propensity scores to approximate causal effects
# ------------------------------------------------------------------- #
# Selecting the controls for the cases
library(MatchIt)
ccdata = matchit(GotDisability ~ as.factor(Gender) + as.factor(Age_Cat) + as.factor(`Client Ethnicity`), data = mydata, ratio = 5, method = "nearest", caliper = .2)
matched_data <- match.data(ccdata) # create ps matched data set from previous output
cc.model = glm(GotDisability ~  Gender+Age_Cat, data = matched_data, family = binomial(link = "logit"))
exp(cc.model$coefficients)
tab_model(cc.model, file="output.html", show.r2 = FALSE, title = 'Logistic Regression: OR Estimates for Disability Attainment')
# Get AUC
predpr.cc = predict(cc.model,type=c("response"))
roccurve <- roc(matched_data$GotDisability ~ predpr.cc)
barplot(model.backward$coefficients)
barplot(cc.model$coefficients)
print(read_csv("counts.csv"))
xtable (read_csv("counts.csv"))
xtable(read_csv("counts.csv"))
myboxplot = read_csv("counts.csv")
summary(myboxplot)
myboxplot = read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_bar(position="dodge", stat="identity")
print(myboxplot)
myboxplot = read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_bar(position="stack", stat="identity")
print(myboxplot)
myboxplot = read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_bar(position="stack", stat="identity") +
label(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender')
myboxplot = read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_bar(position="stack", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender')
print(myboxplot)
myboxplot = read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_bar(position="stack", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender') +
theme_minimal()
print(myboxplot)
myboxplot = read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_bar(position="stack", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
print(myboxplot)
myboxplot = read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_bar(position="dodge", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender', y = 'Count') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
print(myboxplot)
read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_bar(position="stack", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender', y = 'Count') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_text(aes(label=y), vjust=0) +
geom_bar(position="stack", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender', y = 'Count') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_text(aes(label=N), vjust=0) +
geom_bar(position="stack", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender', y = 'Count') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_text(aes(label=N), vjust = -0.5, position = position_dodge(0.9)) +
geom_bar(position="stack", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender', y = 'Count') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_text(aes(label=N), vjust = -0.5, position = position_dodge(0.9)) +
geom_bar(position="dodge", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender', y = 'Count') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_text(aes(label=N), vjust = -0.5, position = position_dodge(0.9)) +
scale_y_continuous(limits = c(0, 10))
read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_text(aes(label=N), vjust = -0.5, position = position_dodge(0.9)) +
scale_y_continuous(limits = c(0, 10)) +
geom_bar(position="dodge", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender', y = 'Count') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_text(aes(label=N), vjust = -0.5, position = position_dodge(0.9)) +
scale_y_continuous(limits = c(0, 10)) +
geom_bar(position="dodge", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender', y = 'Count') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
# -------------- #
# Importing data
# -------------- #
mydata = read_csv("logistic_data.csv") %>%
select("GotDisability","Gender", "Age_Cat", "Client Ethnicity") %>%
na.omit()
# ------------------------------------------------------------------- #
# No Case Control
# ------------------------------------------------------------------- #
model = glm(data = mydata, GotDisability ~ Gender*Age_Cat*`Client Ethnicity`, family = binomial(link="logit"))
model.backward = step(model, direction = 'backward', trace = 0)
library(sjPlot)
tab_model(model.backward, file="output.html", show.r2 = FALSE, title = 'Logistic Regression: OR Estimates for Disability Attainment')
# exp(model.backward$coefficients)
# Get AUC
library(pROC)
predpr = predict(model.backward,type=c("response"))
roccurve <- roc(mydata$GotDisability ~ predpr)
# ------------------------------------------------------------------- #
# Case Control - using propensity scores to approximate causal effects
# ------------------------------------------------------------------- #
# Selecting the controls for the cases
library(MatchIt)
ccdata = matchit(GotDisability ~ as.factor(Gender) + as.factor(Age_Cat) + as.factor(`Client Ethnicity`), data = mydata, ratio = 5, method = "nearest", caliper = .2)
matched_data <- match.data(ccdata) # create ps matched data set from previous output
cc.model = glm(GotDisability ~  Gender+Age_Cat, data = matched_data, family = binomial(link = "logit"))
# exp(cc.model$coefficients)
tab_model(cc.model, file="output.html", show.r2 = FALSE, title = 'Logistic Regression: CC OR Estimates for Disability Attainment')
# Get AUC
predpr.cc = predict(cc.model,type=c("response"))
roccurve <- roc(matched_data$GotDisability ~ predpr.cc)
reticulate::repl_python()
# Importing packages
import numpy as np
import pandas as pd
# Import Data
my_client = pd.read_csv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/CLIENT_191102.tsv", sep = '\t')[['Client ID', 'Client Age at Entry', 'Client Age at Exit', 'Client Gender', 'Client Primary Race', 'Client Ethnicity']]
my_disability_entry = pd.read_csv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/DISABILITY_ENTRY_191102.tsv", sep = '\t')[['Client ID','Disability Determination (Entry)', 'Disability Type (Entry)']]
my_disability_exit = pd.read_csv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/DISABILITY_EXIT_191102.tsv", sep = '\t')[['Client ID','Disability Determination (Exit)', 'Disability Type (Exit)']]
# Rename and merge all datasets
my_disability_entry.rename(columns = {'Disability Type (Entry)':'Disability Type'}, inplace = True)
my_disability_exit.rename(columns = {'Disability Type (Exit)':'Disability Type'}, inplace = True)
# Merge data by client ID
my_disability = pd.merge(my_disability_entry, my_disability_exit, on=['Disability Type','Client ID'], how = 'right')
my_disability.drop_duplicates(keep=False,inplace=True)
# Flag those patients who got a disability while at the UMD
my_disability["GotDisability"] = 0
my_disability.loc[(my_disability['Disability Determination (Entry)'] == 'No (HUD)') &
(my_disability['Disability Determination (Exit)'] == 'Yes (HUD)'), 'GotDisability'] = 1
# Merge and remove the (HUD)
my_patients = pd.merge(my_disability, my_client, on = 'Client ID', how = 'left')
my_patients.replace(regex=True,inplace=True,to_replace="(HUD)",value=r'')
my_patients.replace(regex=True,inplace=True,to_replace=r"\(.*\)",value=r'')
# Indicator for age group
my_patients.loc[(my_patients['Client Age at Exit'] < 25), 'Age_Cat'] = '<25'
my_patients.loc[(my_patients['Client Age at Exit'] < 35) &
(my_patients['Client Age at Exit'] >= 25), 'Age_Cat'] = '25-34'
my_patients.loc[(my_patients['Client Age at Exit'] < 45) &
(my_patients['Client Age at Exit'] >= 35), 'Age_Cat'] = '35-44'
my_patients.loc[(my_patients['Client Age at Exit'] < 55) &
(my_patients['Client Age at Exit'] >= 45), 'Age_Cat'] = '45-54'
my_patients.loc[(my_patients['Client Age at Exit'] < 65) &
(my_patients['Client Age at Exit'] >= 55), 'Age_Cat'] = '55-64'
my_patients.loc[(my_patients['Client Age at Exit'] >= 65), 'Age_Cat'] = '>64'
# Grouping Unkown Races
my_patients['Client Primary Race'].replace(regex=True,inplace=True,to_replace="Client refused",value=r'Unknown')
my_patients['Client Primary Race'].replace(regex=True,inplace=True,to_replace="Data not collected",value=r'Unknown')
my_patients['Client Primary Race'].replace(regex=True,inplace=True,to_replace="Asian",value=r'Other')
my_patients['Client Primary Race'].replace(regex=True,inplace=True,to_replace="Native Hawaiian or Other Pacific Islander",value=r'Other')
# Rename and create dummy variables
my_patients.rename(columns = {'Client Primary Race':'Race'}, inplace = True)
my_patients.rename(columns = {'Client Gender':'Gender'}, inplace = True)
# Demographics graph
my_patients[my_patients.GotDisability == 1].to_csv('patients_data_graph.csv')
# Disability Tabulation
mysummary = my_patients[my_patients.GotDisability == 1].groupby(['Gender', 'Disability Type']).count()[['Client ID']]
mysummary.rename(columns = {'Client ID':'N'}, inplace = True)
mysummary.to_csv('counts.csv')
# Logistic Regression Data
my_patients.to_csv('logistic_data.csv')
my_patients[my_patients.GotDisability == 1].to_csv('patients_data_graph.csv')
mysummary = my_patients[my_patients.GotDisability == 1].groupby(['Gender', 'Disability Type']).count()[['Client ID']]
mysummary.rename(columns = {'Client ID':'N'}, inplace = True)
mysummary.to_csv('counts.csv')
my_patients.to_csv('logistic_data.csv')
clear
my_patients.head()
ls
reticulate::repl_python()
# Importing packages and data
import pandas as pd
import numpy as np
# Importing data and subsetting to only include those years with a positive gain in when reporting taxes
df = pd.read_csv(r'../data/IRS.csv')
df = df[df.Net >= 0]
data = df['Net']
# 12 observations
# Counting the first digit
def count_first_digit(data_str):
mask=df[data_str]>1.
data=list(df[mask][data_str])
for i in range(len(data)):
while data[i]>10:
data[i]=data[i]/10
first_digits=[int(x) for x in sorted(data)]
unique=(set(first_digits))#a list with unique values of first_digit list
data_count=[]
for i in unique:
count=first_digits.count(i)
data_count.append(count)
total_count=sum(data_count)
data_percentage=[(i/total_count)*100 for i in data_count]
return  total_count,data_count, data_percentage
total_count, data_count_pre, data_percentage_pre = count_first_digit("Net")
# In this case data_count_pre and data_percentage_pre have the format of [1,3,4,5,6,8].
# Need to add zeros for 2, 7, 9
data_count = []
data_percentage = []
numbers = []
j = 0
for i in range(1,10):
numbers.append(i)
if i in (2,7,9):
data_count.append(0)
data_percentage.append(0)
else:
data_count.append(data_count_pre[j])
data_percentage.append(data_percentage_pre[j])
j = j+1
# Benford's Law percentages for leading digits 1-9
BENFORD = [30.1, 17.6, 12.5, 9.7, 7.9, 6.7, 5.8, 5.1, 4.6]
# Get the expected number of counts
expected_counts=[round(p * total_count / 100) for p in BENFORD]
# Export data
data = {'Counts':data_count, 'ExpectedCounts':expected_counts}
pd.DataFrame(data).to_csv("fraud_chisq.csv")
# Save data and export to recreate plot in R-Studio
out_tax = pd.DataFrame(columns=['Number', 'Empirical Percentage', 'Benford Distribution'])
out_tax['Number'] = numbers
out_tax['Empirical Percentage'] = data_percentage
out_tax['Benford Percentage'] = BENFORD
out_tax = pd.melt(out_tax, id_vars =['Number'], value_vars =['Empirical Percentage', 'Benford Percentage'])
# Exporting data to folder data under projects
out_tax.to_csv('tax_data_graph.csv')
quit
setwd("~/BIOS611/bios611-projects-fall-2019-jvazquez2/project_3/scripts")
reticulate::repl_python()
# Importing packages and data
import pandas as pd
import numpy as np
# Importing data and subsetting to only include those years with a positive gain in when reporting taxes
df = pd.read_csv(r'../data/IRS.csv')
df = df[df.Net >= 0]
data = df['Net']
# 12 observations
# Counting the first digit
def count_first_digit(data_str):
mask=df[data_str]>1.
data=list(df[mask][data_str])
for i in range(len(data)):
while data[i]>10:
data[i]=data[i]/10
first_digits=[int(x) for x in sorted(data)]
unique=(set(first_digits))#a list with unique values of first_digit list
data_count=[]
for i in unique:
count=first_digits.count(i)
data_count.append(count)
total_count=sum(data_count)
data_percentage=[(i/total_count)*100 for i in data_count]
return  total_count,data_count, data_percentage
total_count, data_count_pre, data_percentage_pre = count_first_digit("Net")
# In this case data_count_pre and data_percentage_pre have the format of [1,3,4,5,6,8].
# Need to add zeros for 2, 7, 9
data_count = []
data_percentage = []
numbers = []
j = 0
for i in range(1,10):
numbers.append(i)
if i in (2,7,9):
data_count.append(0)
data_percentage.append(0)
else:
data_count.append(data_count_pre[j])
data_percentage.append(data_percentage_pre[j])
j = j+1
# Benford's Law percentages for leading digits 1-9
BENFORD = [30.1, 17.6, 12.5, 9.7, 7.9, 6.7, 5.8, 5.1, 4.6]
# Get the expected number of counts
expected_counts=[round(p * total_count / 100) for p in BENFORD]
# Export data
data = {'Counts':data_count, 'ExpectedCounts':expected_counts}
pd.DataFrame(data).to_csv("fraud_chisq.csv")
# Save data and export to recreate plot in R-Studio
out_tax = pd.DataFrame(columns=['Number', 'Empirical Percentage', 'Benford Distribution'])
out_tax['Number'] = numbers
out_tax['Empirical Percentage'] = data_percentage
out_tax['Benford Percentage'] = BENFORD
out_tax = pd.melt(out_tax, id_vars =['Number'], value_vars =['Empirical Percentage', 'Benford Percentage'])
# Exporting data to folder data under projects
out_tax.to_csv('tax_data_graph.csv')
quit
setwd("~/BIOS611/bios611-projects-fall-2019-jvazquez2/project_3/scripts")
reticulate::repl_python()
# Importing packages
import numpy as np
import pandas as pd
# Import Data
my_client = pd.read_csv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/CLIENT_191102.tsv", sep = '\t')[['Client ID', 'Client Age at Entry', 'Client Age at Exit', 'Client Gender', 'Client Primary Race', 'Client Ethnicity']]
my_disability_entry = pd.read_csv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/DISABILITY_ENTRY_191102.tsv", sep = '\t')[['Client ID','Disability Determination (Entry)', 'Disability Type (Entry)']]
my_disability_exit = pd.read_csv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/DISABILITY_EXIT_191102.tsv", sep = '\t')[['Client ID','Disability Determination (Exit)', 'Disability Type (Exit)']]
# Rename and merge all datasets
my_disability_entry.rename(columns = {'Disability Type (Entry)':'Disability Type'}, inplace = True)
my_disability_exit.rename(columns = {'Disability Type (Exit)':'Disability Type'}, inplace = True)
# Merge data by client ID
my_disability = pd.merge(my_disability_entry, my_disability_exit, on=['Disability Type','Client ID'], how = 'right')
my_disability.drop_duplicates(keep=False,inplace=True)
# Flag those patients who got a disability while at the UMD
my_disability["GotDisability"] = 0
my_disability.loc[(my_disability['Disability Determination (Entry)'] == 'No (HUD)') &
(my_disability['Disability Determination (Exit)'] == 'Yes (HUD)'), 'GotDisability'] = 1
# Merge and remove the (HUD)
my_patients = pd.merge(my_disability, my_client, on = 'Client ID', how = 'left')
my_patients.replace(regex=True,inplace=True,to_replace="(HUD)",value=r'')
my_patients.replace(regex=True,inplace=True,to_replace=r"\(.*\)",value=r'')
# Indicator for age group
my_patients.loc[(my_patients['Client Age at Exit'] < 25), 'Age_Cat'] = '<25'
my_patients.loc[(my_patients['Client Age at Exit'] < 35) &
(my_patients['Client Age at Exit'] >= 25), 'Age_Cat'] = '25-34'
my_patients.loc[(my_patients['Client Age at Exit'] < 45) &
(my_patients['Client Age at Exit'] >= 35), 'Age_Cat'] = '35-44'
my_patients.loc[(my_patients['Client Age at Exit'] < 55) &
(my_patients['Client Age at Exit'] >= 45), 'Age_Cat'] = '45-54'
my_patients.loc[(my_patients['Client Age at Exit'] < 65) &
(my_patients['Client Age at Exit'] >= 55), 'Age_Cat'] = '55-64'
my_patients.loc[(my_patients['Client Age at Exit'] >= 65), 'Age_Cat'] = '>64'
# Grouping Unkown Races
my_patients['Client Primary Race'].replace(regex=True,inplace=True,to_replace="Client refused",value=r'Unknown')
my_patients['Client Primary Race'].replace(regex=True,inplace=True,to_replace="Data not collected",value=r'Unknown')
my_patients['Client Primary Race'].replace(regex=True,inplace=True,to_replace="Asian",value=r'Other')
my_patients['Client Primary Race'].replace(regex=True,inplace=True,to_replace="Native Hawaiian or Other Pacific Islander",value=r'Other')
# Rename and create dummy variables
my_patients.rename(columns = {'Client Primary Race':'Race'}, inplace = True)
my_patients.rename(columns = {'Client Gender':'Gender'}, inplace = True)
#Save data to create plots
# Demographics graph
my_patients[my_patients.GotDisability == 1].to_csv('patients_data_graph.csv')
# Disability Tabulation
mysummary = my_patients[my_patients.GotDisability == 1].groupby(['Gender', 'Disability Type']).count()[['Client ID']]
mysummary.rename(columns = {'Client ID':'N'}, inplace = True)
mysummary.to_csv('counts.csv')
# Logistic Regression Data
my_patients.to_csv('logistic_data.csv')
quit
setwd("~/BIOS611/bios611-projects-fall-2019-jvazquez2/project_3/scripts")
knitr::opts_chunk$set(echo = TRUE)
# Chi-Square Test
library(tidyverse)
fraud_data = read_csv('fraud_chisq.csv') %>%
select(-c("X1"))
mychisq = chisq.test(fraud_data$Counts, fraud_data$ExpectedCounts)
mychisq
#Wilcoxon-Rank Sum Test
mywilcox = wilcox.test(fraud_data$Counts, fraud_data$ExpectedCounts)
mywilcox
library(ggplot2)
my_tax_data = read_csv("tax_data_graph.csv")
tax_plot = ggplot(data=my_tax_data, aes(x=Number, y=value, fill=variable)) +
geom_bar(stat="identity", color="black", position=position_dodge()) + theme_minimal() +
labs(title = "Urban Ministries of Durham - 2006-2018 Tax Fraud Analysis", subtitle = 'Net-Income', y = 'Percentage (%)', fill = "Group") +
scale_x_continuous("Digit", labels = as.character(my_tax_data$Number), breaks = my_tax_data$Number)
print(tax_plot)
# This code creates the distributions age per disability attainted while at UMD
my_patient_data = read_csv("patients_data_graph.csv")
patient_plot = ggplot(my_patient_data, aes(x=Gender, y = my_patient_data$`Client Age at Entry`)) +
geom_boxplot(fill='#00BFC4') +
theme_minimal() +
labs(title = "Distributions of Age of Patients who Gained Disability", subtitle = 'Stratified by Gender', y = 'Age', x = 'Gender') +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
print(patient_plot)
read_csv("counts.csv") %>%
ggplot(aes(fill=Gender, y=N, x=`Disability Type`)) +
geom_text(aes(label=N), vjust = -0.5, position = position_dodge(0.9)) +
scale_y_continuous(limits = c(0, 10)) +
geom_bar(position="dodge", stat="identity") +
labs(title = 'Count of Disabilities Attainted while at UMD', subtitle = 'By Gender', y = 'Count') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 65, hjust = 1))
# -------------- #
# Importing data
# -------------- #
mydata = read_csv("logistic_data.csv") %>%
select("GotDisability","Gender", "Age_Cat", "Client Ethnicity") %>%
na.omit()
# ------------------------------------------------------------------- #
# No Case Control
# ------------------------------------------------------------------- #
model = glm(data = mydata, GotDisability ~ Gender*Age_Cat*`Client Ethnicity`, family = binomial(link="logit"))
model.backward = step(model, direction = 'backward', trace = 0)
library(sjPlot)
tab_model(model.backward, file="output.html", show.r2 = FALSE, title = 'Logistic Regression: OR Estimates for Disability Attainment')
# exp(model.backward$coefficients)
# Get AUC
library(pROC)
predpr = predict(model.backward,type=c("response"))
roccurve <- roc(mydata$GotDisability ~ predpr)
# ------------------------------------------------------------------- #
# Case Control - using propensity scores to approximate causal effects
# ------------------------------------------------------------------- #
# Selecting the controls for the cases
library(MatchIt)
ccdata = matchit(GotDisability ~ as.factor(Gender) + as.factor(Age_Cat) + as.factor(`Client Ethnicity`), data = mydata, ratio = 5, method = "nearest", caliper = .2)
matched_data <- match.data(ccdata) # create ps matched data set from previous output
cc.model = glm(GotDisability ~  Gender+Age_Cat, data = matched_data, family = binomial(link = "logit"))
# exp(cc.model$coefficients)
tab_model(cc.model, file="output.html", show.r2 = FALSE, title = 'Logistic Regression: CC OR Estimates for Disability Attainment')
# Get AUC
predpr.cc = predict(cc.model,type=c("response"))
roccurve <- roc(matched_data$GotDisability ~ predpr.cc)
